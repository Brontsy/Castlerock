@model CmsPageViewModel
@using Portal.Cms.Interfaces
@using Portal.Interfaces.Cms
@using Portal.Web.Areas.CMS.Models
@using Portal.Web.Areas.CMS
@using Portal.Web.Extensions;
@{
    ViewBag.Title = "Content Management System";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>

.control-list { position: absolute; width: 481px; margin: 0px 0px 0px -161px; border: none; padding: 0px; box-shadow: 3px 3px 5px rgba(0,0,0,0.5); border-left: 1px solid #ffffff; border-right: 1px solid #ffffff; border-bottom: 1px solid #ffffff; }
.control-list .spacer { background: #55D0FF; height: 4px; }
.control-list ul { padding: 10px; }
.control-list ul li { padding: 8px 0px 8px 10px; }

.location-list { position: absolute; width: 481px; margin: 0px 0px 0px -322px; border: none; padding: 0px; box-shadow: 3px 3px 5px rgba(0,0,0,0.5); border-left: 1px solid #ffffff; border-right: 1px solid #ffffff; border-bottom: 1px solid #ffffff; }
.location-list a { display: block; padding: 10px 0px 10px 0px; padding: 10px; }
.location-list .spacer { background: #55D0FF; height: 4px; }
</style>


<ul class="sub-navigation">
    <li>
        @Html.RouteLink("Add Control", CMSAreaRegistration.CmsAddControlsRouteUrl, new RouteValueDictionary(new { location = "navigation" }), new Dictionary<string, Object> { { "class", "tooltip-toggle button white-arrow" }, { "data-tooltip", "add-control-location" } })
        
        <div class="location-list tooltip hidden" data-tooltip="add-control-location">
            <div class="spacer"></div>
            @foreach (string location in Model.Page.Template.Locations)
            {
                @Html.RouteLink(location, CMSAreaRegistration.CmsAddControlsRouteUrl, new { location = location }, new { })
            }
        </div>
    </li>

    <li>
        <a href="/Controls" class="tooltip-toggle" data-tooltip="view-controls">
            Controls
        </a>
        
        <div class="control-list tooltip view-controls-tooltip hidden" data-tooltip="view-controls">
            <div class="spacer"></div>
            @{Html.RenderPartial("ControlList", Model.Page.Controls);}
        </div>
    </li>

    <li>
        <a href="/Settings">Page Settings</a>
    </li>

    <li class="left">
        <h1>
            @Model.Page.Name
        </h1>
    </li>
</ul>




<div class="content-padding">

    <div class="castlerock">

        <div id="@Model.Page.NameUrlFriendly.ToLower()">

            @{ string controlHtml = string.Empty; }
            @{ string html = Model.Page.Template.Html; }

            @foreach (string location in Model.Page.Template.Locations)
            {
                { controlHtml = string.Empty; }
                foreach (IControl control in Model.Page.Controls.Where(o => o.Location == location))
                {
                    {
                        controlHtml += Html.RenderPartialToString(control.View, control);
                    }
                }

                html = html.Replace(string.Format("[location=\"{0}\"]", location), controlHtml);
            }
    
            @Html.Raw(html)

        </div>
    </div>

</div>




<script type="text/javascript">



    // Base class for the queue drag and drop functionality.
    var ControlSort = new Class({

        Extends: Sortables,
        _position: null,

        // Constructor for the Queue drag and drop functionality
        initialize: function (itemsContainer, options) {

            this.ItemsContainer = itemsContainer;

            this.parent(itemsContainer, {

                constrain: true,
                //clone: true,
                revert: true,
                //handle: '.sort-handle',
                //opacity: 0.3
            });

            this.addEvent('onStart', this.StartSorting.bind(this));
            this.addEvent('onSort', this.Sort.bind(this));
            this.addEvent('onComplete', this.EndSorting.bind(this));
        },

        // Called when a queue item has been picked up to be dragged
        // We override the parent start function so that we can make sure specific
        // html elements were not clicked
        start: function (event, element) {

            var ids = this.TrimSerializedData(this.serialize(0));
            var elementId = element.get('id');

            ids.each(function (id, index) {

                if (id == elementId) {
                    this._position = index;
                }
            }, this);

            // make sure the element that was clicked is not a link, input field or image.
//            var testElement = function (element) {
//                if (element.tagName == 'A' || element.tagName == 'INPUT' || element.tagName == 'IMG' || element.tagName == 'BUTTON' || element.tagName == 'TEXTAREA')
//                    return false;
//                else
//                    return true;
//            };
//            if (!testElement(event.target))
//                return;

            this.parent(event, element);
        },

        Sort: function(element, clone)
        {
            var ids = this.TrimSerializedData(this.serialize(0));
            var elementId = element.get('id');
            var newPosition;
            ids.each(function (id, index) {

                if (id == elementId) {
                    newPosition = index;
                }
            }, this);


            var control = $('control-'+elementId);
            if(newPosition < this._position)
            {
                var previous = control.getPrevious();
                control.inject(previous, 'before');
            }
            
            if(newPosition > this._position)
            {
                var previous = control.getNext();
                control.inject(previous, 'after');
            }

            this._position = newPosition;
        },

        // Called when a queue item is starting to be dragged
        StartSorting: function (element) {
            this.SerializedState = this.serialize(0);
        },

        // Called when a queue item has just been dropped (dragging has finished)
        EndSorting: function (element) {
            if (this.HasChangedState()) {
                this.SaveControl(element);
            }
        },

        // Has the order of the page view instances changed or not?
        HasChangedState: function () {
            var changed = false;

            // if the list has been serialized (ie has an item started to be dragged)
            if (this.SerializedState) {
                // get the new serialized list.
                var ids = this.TrimSerializedData(this.serialize(0));

                // get the old serialized list
                var previousIds = this.TrimSerializedData(this.SerializedState);

                // loop through the ids and check to see if any have changed
                ids.each(function (id, index) {

                    if (id != previousIds[index]) {
                        changed = true;
                    }
                }, this);
            }

            return changed;
        },

        // Trims the serialized data. For some reason when ever
        // we call this.serialize(0) it leaves empty spots in the array.
        // So this function removes those empty spots in the array
        TrimSerializedData: function (ids) {
            return ids.filter(function (id) {

                return (id != null);
            });
        },

        SaveControl: function (element) {

            //this.ItemsContainer.setStyle('opacity', '0.5');

            //var url = '/' + this.Website + '/Sort/Controls/Save';

            //var request = new Request.HTML({

            //url: url,
            //method: 'post'
            //});

            //request.addEvent('success', this.DisplayOrderSaved.bindWithEvent(this));
            //request.send('controlIds=' + this.TrimSerializedData(this.serialize(0)));
        },

        DisplayOrderSaved: function () {
            this.ItemsContainer.setStyle('opacity', '1');
        }

    });

    window.addEvent('domready', function () {

        $$('.control-list ul').each(function (element) {
            var controlSort = new ControlSort(element);
        });

    });



</script>




